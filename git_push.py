#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–º–º–∏—Ç–∞ –∏ –ø—É—à–∞ –≤ GitHub
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python git_push.py [—Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞]
"""

import subprocess
import sys
import os
from datetime import datetime

def run_command(command, description):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    print(f"üîÑ {description}...")
    try:
        result = subprocess.run(command, shell=True, capture_output=True, text=True, encoding='utf-8')
        if result.returncode == 0:
            print(f"‚úÖ {description} - —É—Å–ø–µ—à–Ω–æ")
            if result.stdout.strip():
                print(f"   {result.stdout.strip()}")
            return True
        else:
            print(f"‚ùå {description} - –æ—à–∏–±–∫–∞")
            if result.stderr.strip():
                print(f"   {result.stderr.strip()}")
            return False
    except Exception as e:
        print(f"‚ùå {description} - –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        return False

def get_commit_message():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ"""
    if len(sys.argv) > 1:
        return sys.argv[1]
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    try:
        result = subprocess.run("git status --porcelain", shell=True, capture_output=True, text=True)
        if result.returncode == 0 and result.stdout.strip():
            changes = result.stdout.strip().split('\n')
            modified_files = [line.split()[-1] for line in changes if line.startswith('M')]
            new_files = [line.split()[-1] for line in changes if line.startswith('A')]
            
            if new_files:
                return f"–î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã: {', '.join(new_files[:3])}"
            elif modified_files:
                return f"–û–±–Ω–æ–≤–ª–µ–Ω—ã —Ñ–∞–π–ª—ã: {', '.join(modified_files[:3])}"
        
        return f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç {datetime.now().strftime('%d.%m.%Y %H:%M')}"
    except:
        return f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç {datetime.now().strftime('%d.%m.%Y %H:%M')}"

def main():
    print("üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–º–º–∏—Ç –∏ –ø—É—à –≤ GitHub")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
    if not os.path.exists('.git'):
        print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π")
        return False
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞
    commit_message = get_commit_message()
    print(f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞: {commit_message}")
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
    if not run_command("git status", "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞"):
        return False
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if not run_command("git add .", "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤"):
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –∫–æ–º–º–∏—Ç–∞
    result = subprocess.run("git diff --cached --quiet", shell=True, capture_output=True)
    if result.returncode == 0:
        print("‚ÑπÔ∏è  –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∫–æ–º–º–∏—Ç–∞")
        return True
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–º–º–∏—Ç
    if not run_command(f'git commit -m "{commit_message}"', "–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞"):
        return False
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ—Ç–∫–µ
    result = subprocess.run("git branch --show-current", shell=True, capture_output=True, text=True)
    current_branch = result.stdout.strip() if result.returncode == 0 else "main"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ª–∏ —É–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
    result = subprocess.run("git remote -v", shell=True, capture_output=True, text=True)
    if not result.stdout.strip():
        print("‚ö†Ô∏è  –£–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        print("   –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:")
        print("   git remote add origin <URL_–≤–∞—à–µ–≥–æ_—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è>")
        return False
    
    # –ü—É—à–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if not run_command(f"git push origin {current_branch}", f"–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ GitHub (–≤–µ—Ç–∫–∞ {current_branch})"):
        return False
    
    print()
    print("üéâ –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    print(f"üìä –í–µ—Ç–∫–∞: {current_branch}")
    print(f"üí¨ –ö–æ–º–º–∏—Ç: {commit_message}")
    
    return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
